<?xml version="1.0" encoding="utf-8"?>
<CudafyModule Version="1.29.5576.13786" Name="CUDAFloat" DebugInfo="false" HasCudaSourceCode="false" HasPTX="false" HasBinary="false">
  <CudaSourceCode></CudaSourceCode>
  <PTXMODULES />
  <BinaryModules />
  <SourceCodes>
    <SourceCodeFile ID="4be5629c-657b-41a1-8046-186f593eff65" Language="Cuda" Arch="Unknown">I2lmIGRlZmluZWQoY2xfa2hyX2ZwNjQpDQojcHJhZ21hIE9QRU5DTCBFWFRFTlNJT04gY2xfa2hyX2ZwNjQ6IGVuYWJsZQ0KI2VsaWYgZGVmaW5lZChjbF9hbWRfZnA2NCkNCiNwcmFnbWEgT1BFTkNMIEVYVEVOU0lPTiBjbF9hbWRfZnA2NDogZW5hYmxlDQojZW5kaWYNCnN0cnVjdCBCb2R5DQp7DQoJZmxvYXQgTG9jWDsNCglmbG9hdCBMb2NZOw0KCWZsb2F0IE1hc3M7DQoJZmxvYXQgU3BlZWRYOw0KCWZsb2F0IFNwZWVkWTsNCglmbG9hdCBGb3JjZVg7DQoJZmxvYXQgRm9yY2VZOw0KCWZsb2F0IEZvcmNlVG90Ow0KCWludCBDb2xvcjsNCglmbG9hdCBTaXplOw0KCWludCBWaXNpYmxlOw0KCWludCBJblJvY2hlOw0KCWludCBCbGFja0hvbGU7DQoJaW50IFVJRDsNCglmbG9hdCBEZW5zaXR5Ow0KCWZsb2F0IFByZXNzdXJlOw0KCWludCBIYXNDb2xsaXNpb247DQoJaW50IElzRXhwbG9zaW9uOw0KCWZsb2F0IExpZmV0aW1lOw0KCWZsb2F0IEFnZTsNCn07DQoNCg0KLy8gTkJvZGllcy5QaHlzaWNzLkNVREFGbG9hdA0KX19rZXJuZWwgIHZvaWQgQ2FsY0ZvcmNlKGdsb2JhbCBzdHJ1Y3QgQm9keSogaW5Cb2RpZXMsIGludCBpbkJvZGllc0xlbjAsIGdsb2JhbCBzdHJ1Y3QgQm9keSogb3V0Qm9kaWVzLCBpbnQgb3V0Qm9kaWVzTGVuMCwgZmxvYXQgZHQpOw0KLy8gTkJvZGllcy5QaHlzaWNzLkNVREFGbG9hdA0KX19rZXJuZWwgIHZvaWQgQ2FsY0NvbGxpc2lvbnMoZ2xvYmFsIHN0cnVjdCBCb2R5KiBpbkJvZGllcywgaW50IGluQm9kaWVzTGVuMCwgZ2xvYmFsIHN0cnVjdCBCb2R5KiBvdXRCb2RpZXMsIGludCBvdXRCb2RpZXNMZW4wLCBmbG9hdCBkdCwgZmxvYXQgdmlzY29zaXR5KTsNCi8vIE5Cb2RpZXMuUGh5c2ljcy5DVURBRmxvYXQNCiAgc3RydWN0IEJvZHkgQ29sbGlkZUJvZGllcyhzdHJ1Y3QgQm9keSBtYXN0ZXIsIHN0cnVjdCBCb2R5IHNsYXZlLCBmbG9hdCBkViwgZmxvYXQgdmVjWCwgZmxvYXQgdmVjWSk7DQoNCi8vIE5Cb2RpZXMuUGh5c2ljcy5DVURBRmxvYXQNCl9fa2VybmVsICB2b2lkIENhbGNGb3JjZShnbG9iYWwgc3RydWN0IEJvZHkqIGluQm9kaWVzLCBpbnQgaW5Cb2RpZXNMZW4wLCBnbG9iYWwgc3RydWN0IEJvZHkqIG91dEJvZGllcywgaW50IG91dEJvZGllc0xlbjAsIGZsb2F0IGR0KQ0Kew0KCWZsb2F0IG51bSA9IDAuM2Y7DQoJZmxvYXQgbnVtMiA9IDEuMTkyMDkzRS0wN2Y7DQoJaW50IG51bTMgPSBnZXRfbG9jYWxfc2l6ZSgwKSAqIGdldF9ncm91cF9pZCgwKSArIGdldF9sb2NhbF9pZCgwKTsNCglzdHJ1Y3QgQm9keSBib2R5ID0gaW5Cb2RpZXNbKG51bTMpXTsNCglib2R5LkZvcmNlVG90ID0gMC4wZjsNCglib2R5LkZvcmNlWCA9IDAuMGY7DQoJYm9keS5Gb3JjZVkgPSAwLjBmOw0KCWJvZHkuSGFzQ29sbGlzaW9uID0gMDsNCglib2R5LkRlbnNpdHkgPSAwLjBmOw0KCWJvZHkuUHJlc3N1cmUgPSAwLjBmOw0KCWZsb2F0IHNpemUgPSBib2R5LlNpemU7DQoJZmxvYXQgbnVtNCA9IHNpemUgKiBzaXplOw0KCWRvdWJsZSBudW01ID0gcG93KChkb3VibGUpc2l6ZSwgOS4wKTsNCglkb3VibGUgbnVtNiA9IChkb3VibGUpKChmbG9hdCkoMzE1LjAgLyAoMjAxLjA2MTkyOTgyOTc0NyAqIG51bTUpKSk7DQoJZmxvYXQgbnVtNyA9IG51bTQgLSBudW0yOw0KCWRvdWJsZSBudW04ID0gbnVtNiAqIChkb3VibGUpbnVtNyAqIChkb3VibGUpbnVtNyAqIChkb3VibGUpbnVtNzsNCglib2R5LkRlbnNpdHkgPSAoZmxvYXQpKChkb3VibGUpYm9keS5NYXNzICogbnVtOCk7DQoJaW50IG51bTkgPSBpbkJvZGllc0xlbjA7DQoJZm9yIChpbnQgaSA9IDA7IGkgPCBudW05OyBpKyspDQoJew0KCQlzdHJ1Y3QgQm9keSBib2R5MiA9IGluQm9kaWVzWyhpKV07DQoJCWJvb2wgZmxhZyA9IGJvZHkyLlZpc2libGUgPT0gMTsNCgkJaWYgKGZsYWcpDQoJCXsNCgkJCWZsb2F0IG51bTEwID0gYm9keTIuTG9jWCAtIGJvZHkuTG9jWDsNCgkJCWZsb2F0IG51bTExID0gYm9keTIuTG9jWSAtIGJvZHkuTG9jWTsNCgkJCWZsb2F0IG51bTEyID0gbnVtMTAgKiBudW0xMCArIG51bTExICogbnVtMTE7DQoJCQlmbG9hdCBudW0xMyA9IChmbG9hdClzcXJ0KChkb3VibGUpbnVtMTIpOw0KCQkJYm9vbCBmbGFnMiA9IGJvZHkyLlVJRCAhPSBib2R5LlVJRDsNCgkJCWlmIChmbGFnMikNCgkJCXsNCgkJCQlib29sIGZsYWczID0gbnVtMTMgPiAwLjBmOw0KCQkJCWlmIChmbGFnMykNCgkJCQl7DQoJCQkJCWJvb2wgZmxhZzQgPSBib2R5Mi5Jc0V4cGxvc2lvbiAhPSAxOw0KCQkJCQlpZiAoZmxhZzQpDQoJCQkJCXsNCgkJCQkJCWZsb2F0IG51bTE0ID0gYm9keTIuTWFzcyAqIGJvZHkuTWFzczsNCgkJCQkJCWZsb2F0IG51bTE1ID0gbnVtMTQgLyAobnVtMTIgKyAwLjAyZik7DQoJCQkJCQlib2R5LkZvcmNlVG90ICs9IG51bTE1Ow0KCQkJCQkJYm9keS5Gb3JjZVggKz0gbnVtMTUgKiBudW0xMCAvIG51bTEzOw0KCQkJCQkJYm9keS5Gb3JjZVkgKz0gbnVtMTUgKiBudW0xMSAvIG51bTEzOw0KCQkJCQl9DQoJCQkJfQ0KCQkJCWJvb2wgZmxhZzUgPSBudW0xMyA8PSBib2R5LlNpemUgKiAwLjVmICsgYm9keTIuU2l6ZSAqIDAuNWY7DQoJCQkJaWYgKGZsYWc1KQ0KCQkJCXsNCgkJCQkJYm9keS5IYXNDb2xsaXNpb24gPSAxOw0KCQkJCX0NCgkJCQlib29sIGZsYWc2ID0gYm9keS5JblJvY2hlID09IDEgJiYgYm9keTIuSW5Sb2NoZSA9PSAxICYmIGJvZHkyLkJsYWNrSG9sZSAhPSAxOw0KCQkJCWlmIChmbGFnNikNCgkJCQl7DQoJCQkJCWJvb2wgZmxhZzcgPSBudW0xMiA8PSBzaXplOw0KCQkJCQlpZiAoZmxhZzcpDQoJCQkJCXsNCgkJCQkJCWJvb2wgZmxhZzggPSBudW0xMiA8IG51bTI7DQoJCQkJCQlpZiAoZmxhZzgpDQoJCQkJCQl7DQoJCQkJCQkJbnVtMTIgPSBudW0yOw0KCQkJCQkJfQ0KCQkJCQkJbnVtNyA9IG51bTQgLSBudW0xMjsNCgkJCQkJCW51bTggPSBudW02ICogKGRvdWJsZSludW03ICogKGRvdWJsZSludW03ICogKGRvdWJsZSludW03Ow0KCQkJCQkJYm9keS5EZW5zaXR5ICs9IChmbG9hdCkoKGRvdWJsZSlib2R5Lk1hc3MgKiBudW04KTsNCgkJCQkJfQ0KCQkJCX0NCgkJCX0NCgkJfQ0KCX0NCgliYXJyaWVyKENMS19MT0NBTF9NRU1fRkVOQ0UpOw0KCWJvb2wgZmxhZzkgPSBib2R5LkRlbnNpdHkgPiAwLjBmOw0KCWlmIChmbGFnOSkNCgl7DQoJCWJvZHkuUHJlc3N1cmUgPSBudW0gKiBib2R5LkRlbnNpdHk7DQoJfQ0KCWJvb2wgZmxhZzEwID0gYm9keS5Gb3JjZVRvdCA+IGJvZHkuTWFzcyAqIDQuMGYgJiBib2R5LkJsYWNrSG9sZSA9PSAwOw0KCWlmIChmbGFnMTApDQoJew0KCQlib2R5LkluUm9jaGUgPSAxOw0KCX0NCgllbHNlDQoJew0KCQlib29sIGZsYWcxMSA9IGJvZHkuRm9yY2VUb3QgKiAyLjBmIDwgYm9keS5NYXNzICogNC4wZjsNCgkJaWYgKGZsYWcxMSkNCgkJew0KCQkJYm9keS5JblJvY2hlID0gMDsNCgkJfQ0KCQllbHNlDQoJCXsNCgkJCWJvb2wgZmxhZzEyID0gYm9keS5CbGFja0hvbGUgPT0gMiB8fCBib2R5LklzRXhwbG9zaW9uID09IDE7DQoJCQlpZiAoZmxhZzEyKQ0KCQkJew0KCQkJCWJvZHkuSW5Sb2NoZSA9IDE7DQoJCQl9DQoJCX0NCgl9DQoJb3V0Qm9kaWVzWyhudW0zKV0gPSBib2R5Ow0KfQ0KLy8gTkJvZGllcy5QaHlzaWNzLkNVREFGbG9hdA0KX19rZXJuZWwgIHZvaWQgQ2FsY0NvbGxpc2lvbnMoZ2xvYmFsIHN0cnVjdCBCb2R5KiBpbkJvZGllcywgaW50IGluQm9kaWVzTGVuMCwgZ2xvYmFsIHN0cnVjdCBCb2R5KiBvdXRCb2RpZXMsIGludCBvdXRCb2RpZXNMZW4wLCBmbG9hdCBkdCwgZmxvYXQgdmlzY29zaXR5KQ0Kew0KCWludCBudW0gPSBnZXRfbG9jYWxfc2l6ZSgwKSAqIGdldF9ncm91cF9pZCgwKSArIGdldF9sb2NhbF9pZCgwKTsNCglzdHJ1Y3QgQm9keSBib2R5ID0gaW5Cb2RpZXNbKG51bSldOw0KCWJvb2wgZmxhZyA9IGJvZHkuSGFzQ29sbGlzaW9uID09IDE7DQoJaWYgKGZsYWcpDQoJew0KCQlmbG9hdCBudW0yID0gMS4xOTIwOTNFLTA3ZjsNCgkJZmxvYXQgc2l6ZSA9IGJvZHkuU2l6ZTsNCgkJZG91YmxlIG51bTMgPSBwb3coKGRvdWJsZSkoc2l6ZSAvIDMuMGYpLCA2LjApOw0KCQlmbG9hdCBudW00ID0gKGZsb2F0KSgxNS4wIC8gKDMuMTQxNTkyNjUzNTg5NzkgKiBudW0zKSk7DQoJCWZsb2F0IG51bTUgPSBzaXplICogc2l6ZTsNCgkJZmxvYXQgbnVtNiA9IChmbG9hdClwb3coKGRvdWJsZSlzaXplLCAzLjApOw0KCQlmbG9hdCBudW03ID0gKGZsb2F0KSgxNS4wIC8gKDYuMjgzMTg1MzA3MTc5NTkgKiAoZG91YmxlKW51bTYpKTsNCgkJaW50IG51bTggPSBpbkJvZGllc0xlbjA7DQoJCWJvb2wgZmxhZzIgPSBib2R5LlZpc2libGUgPT0gMTsNCgkJaWYgKGZsYWcyKQ0KCQl7DQoJCQlmb3IgKGludCBpID0gMDsgaSA8IG51bTg7IGkrKykNCgkJCXsNCgkJCQlzdHJ1Y3QgQm9keSBib2R5MiA9IGluQm9kaWVzWyhpKV07DQoJCQkJYm9vbCBmbGFnMyA9IGJvZHkyLlVJRCAhPSBib2R5LlVJRCAmJiBib2R5Mi5WaXNpYmxlID09IDEgJiYgYm9keTIuSGFzQ29sbGlzaW9uID09IDE7DQoJCQkJaWYgKGZsYWczKQ0KCQkJCXsNCgkJCQkJZmxvYXQgbnVtOSA9IGJvZHkyLkxvY1ggLSBib2R5LkxvY1g7DQoJCQkJCWZsb2F0IG51bTEwID0gYm9keTIuTG9jWSAtIGJvZHkuTG9jWTsNCgkJCQkJZmxvYXQgbnVtMTEgPSBudW05ICogbnVtOSArIG51bTEwICogbnVtMTA7DQoJCQkJCWZsb2F0IG51bTEyID0gKGZsb2F0KXNxcnQoKGRvdWJsZSludW0xMSk7DQoJCQkJCWJvb2wgZmxhZzQgPSBudW0xMiA8PSBib2R5LlNpemUgKiAwLjVmICsgYm9keTIuU2l6ZSAqIDAuNWY7DQoJCQkJCWlmIChmbGFnNCkNCgkJCQkJew0KCQkJCQkJYm9vbCBmbGFnNSA9IG51bTEyID4gMC4wZjsNCgkJCQkJCWlmIChmbGFnNSkNCgkJCQkJCXsNCgkJCQkJCQlib29sIGZsYWc2ID0gYm9keS5JblJvY2hlID09IDEgJiBib2R5Mi5JblJvY2hlID09IDE7DQoJCQkJCQkJaWYgKGZsYWc2KQ0KCQkJCQkJCXsNCgkJCQkJCQkJYm9vbCBmbGFnNyA9IGJvZHkuRGVuc2l0eSA+IDAuMGYgJiYgYm9keTIuRGVuc2l0eSA+IDAuMGY7DQoJCQkJCQkJCWlmIChmbGFnNykNCgkJCQkJCQkJew0KCQkJCQkJCQkJYm9vbCBmbGFnOCA9IG51bTExIDwgbnVtMjsNCgkJCQkJCQkJCWlmIChmbGFnOCkNCgkJCQkJCQkJCXsNCgkJCQkJCQkJCQludW0xMSA9IG51bTI7DQoJCQkJCQkJCQkJbnVtMTIgPSAoZmxvYXQpc3FydCgoZG91YmxlKW51bTExKTsNCgkJCQkJCQkJCX0NCgkJCQkJCQkJCWZsb2F0IG51bTEzID0gYm9keS5NYXNzICogKGJvZHkuUHJlc3N1cmUgKyBib2R5Mi5QcmVzc3VyZSkgLyAoMi4wZiAqIGJvZHkuRGVuc2l0eSk7DQoJCQkJCQkJCQlmbG9hdCBudW0xNCA9IC1udW00ICogMy4wZiAqIChzaXplIC0gbnVtMTIpICogKHNpemUgLSBudW0xMikgLyBudW0xMjsNCgkJCQkJCQkJCWZsb2F0IG51bTE1ID0gbnVtOSAqIG51bTE0Ow0KCQkJCQkJCQkJZmxvYXQgbnVtMTYgPSBudW0xMCAqIG51bTE0Ow0KCQkJCQkJCQkJbnVtMTUgKj0gbnVtMTM7DQoJCQkJCQkJCQludW0xNiAqPSBudW0xMzsNCgkJCQkJCQkJCWJvZHkuRm9yY2VYICs9IG51bTE1Ow0KCQkJCQkJCQkJYm9keS5Gb3JjZVkgKz0gbnVtMTY7DQoJCQkJCQkJCQlib29sIGZsYWc5ID0gYm9keS5Jc0V4cGxvc2lvbiAhPSAxICYmIGJvZHkyLklzRXhwbG9zaW9uICE9IDE7DQoJCQkJCQkJCQlpZiAoZmxhZzkpDQoJCQkJCQkJCQl7DQoJCQkJCQkJCQkJZmxvYXQgbnVtMTcgPSBudW03ICogKDYuMGYgLyBudW02KSAqIChzaXplIC0gbnVtMTIpOw0KCQkJCQkJCQkJCWZsb2F0IG51bTE4ID0gYm9keS5NYXNzICogbnVtMTcgKiB2aXNjb3NpdHkgKiAxLjBmIC8gYm9keS5EZW5zaXR5Ow0KCQkJCQkJCQkJCWZsb2F0IG51bTE5ID0gYm9keS5TcGVlZFggLSBib2R5Mi5TcGVlZFg7DQoJCQkJCQkJCQkJZmxvYXQgbnVtMjAgPSBib2R5LlNwZWVkWSAtIGJvZHkyLlNwZWVkWTsNCgkJCQkJCQkJCQludW0xOSAqPSBudW0xODsNCgkJCQkJCQkJCQludW0yMCAqPSBudW0xODsNCgkJCQkJCQkJCQlib2R5LkZvcmNlWCAtPSBudW0xOTsNCgkJCQkJCQkJCQlib2R5LkZvcmNlWSAtPSBudW0yMDsNCgkJCQkJCQkJCX0NCgkJCQkJCQkJfQ0KCQkJCQkJCX0NCgkJCQkJCQllbHNlDQoJCQkJCQkJew0KCQkJCQkJCQlib29sIGZsYWcxMCA9IGJvZHkuSW5Sb2NoZSA9PSAxICYgYm9keTIuSW5Sb2NoZSA9PSAwOw0KCQkJCQkJCQlpZiAoZmxhZzEwKQ0KCQkJCQkJCQl7DQoJCQkJCQkJCQlib2R5LlZpc2libGUgPSAwOw0KCQkJCQkJCQl9DQoJCQkJCQkJCWVsc2UNCgkJCQkJCQkJew0KCQkJCQkJCQkJZmxvYXQgc3BlZWRYID0gYm9keS5TcGVlZFg7DQoJCQkJCQkJCQlmbG9hdCBzcGVlZFkgPSBib2R5LlNwZWVkWTsNCgkJCQkJCQkJCWZsb2F0IHNwZWVkWDIgPSBib2R5Mi5TcGVlZFg7DQoJCQkJCQkJCQlmbG9hdCBzcGVlZFkyID0gYm9keTIuU3BlZWRZOw0KCQkJCQkJCQkJZmxvYXQgbWFzcyA9IGJvZHkuTWFzczsNCgkJCQkJCQkJCWZsb2F0IG1hc3MyID0gYm9keTIuTWFzczsNCgkJCQkJCQkJCWZsb2F0IG51bTIxID0gbnVtOSAqIDAuNWY7DQoJCQkJCQkJCQlmbG9hdCBudW0yMiA9IG51bTEwICogMC41ZjsNCgkJCQkJCQkJCW51bTIxIC89IG51bTEyICogMC41ZjsNCgkJCQkJCQkJCW51bTIyIC89IG51bTEyICogMC41ZjsNCgkJCQkJCQkJCWZsb2F0IG51bTIzID0gbnVtMjEgKiBzcGVlZFggKyBudW0yMiAqIHNwZWVkWTsNCgkJCQkJCQkJCWZsb2F0IG51bTI0ID0gbnVtMjEgKiBzcGVlZFgyICsgbnVtMjIgKiBzcGVlZFkyOw0KCQkJCQkJCQkJZmxvYXQgbnVtMjUgPSAobWFzcyAqIG51bTIzICsgbWFzczIgKiBudW0yNCAtIG1hc3MyICogKG51bTIzIC0gbnVtMjQpKSAvIChtYXNzICsgbWFzczIpOw0KCQkJCQkJCQkJZmxvYXQgZFYgPSBudW0yNSAtIG51bTIzOw0KCQkJCQkJCQkJYm9vbCBmbGFnMTEgPSBib2R5Lk1hc3MgPiBib2R5Mi5NYXNzOw0KCQkJCQkJCQkJaWYgKGZsYWcxMSkNCgkJCQkJCQkJCXsNCgkJCQkJCQkJCQlib2R5ID0gQ29sbGlkZUJvZGllcyhib2R5LCBib2R5MiwgZFYsIG51bTIxLCBudW0yMik7DQoJCQkJCQkJCQl9DQoJCQkJCQkJCQllbHNlDQoJCQkJCQkJCQl7DQoJCQkJCQkJCQkJYm9vbCBmbGFnMTIgPSBib2R5Lk1hc3MgPT0gYm9keTIuTWFzczsNCgkJCQkJCQkJCQlpZiAoZmxhZzEyKQ0KCQkJCQkJCQkJCXsNCgkJCQkJCQkJCQkJYm9vbCBmbGFnMTMgPSBib2R5LlVJRCA+IGJvZHkyLlVJRDsNCgkJCQkJCQkJCQkJaWYgKGZsYWcxMykNCgkJCQkJCQkJCQkJew0KCQkJCQkJCQkJCQkJYm9keSA9IENvbGxpZGVCb2RpZXMoYm9keSwgYm9keTIsIGRWLCBudW0yMSwgbnVtMjIpOw0KCQkJCQkJCQkJCQl9DQoJCQkJCQkJCQkJCWVsc2UNCgkJCQkJCQkJCQkJew0KCQkJCQkJCQkJCQkJYm9keS5WaXNpYmxlID0gMDsNCgkJCQkJCQkJCQkJfQ0KCQkJCQkJCQkJCX0NCgkJCQkJCQkJCQllbHNlDQoJCQkJCQkJCQkJew0KCQkJCQkJCQkJCQlib2R5LlZpc2libGUgPSAwOw0KCQkJCQkJCQkJCX0NCgkJCQkJCQkJCX0NCgkJCQkJCQkJfQ0KCQkJCQkJCX0NCgkJCQkJCX0NCgkJCQkJCWVsc2UNCgkJCQkJCXsNCgkJCQkJCQlib29sIGZsYWcxNCA9IGJvZHkuTWFzcyA+IGJvZHkyLk1hc3M7DQoJCQkJCQkJaWYgKGZsYWcxNCkNCgkJCQkJCQl7DQoJCQkJCQkJCWZsb2F0IG51bTI2ID0gMy4xNDE1OTNmICogKGZsb2F0KXBvdygoZG91YmxlKWJvZHkuU2l6ZSwgMi4wKTsNCgkJCQkJCQkJZmxvYXQgbnVtMjcgPSAzLjE0MTU5M2YgKiAoZmxvYXQpcG93KChkb3VibGUpYm9keTIuU2l6ZSwgMi4wKTsNCgkJCQkJCQkJbnVtMjYgKz0gbnVtMjc7DQoJCQkJCQkJCWJvZHkuU2l6ZSA9IChmbG9hdClzcXJ0KChkb3VibGUpbnVtMjYgLyAzLjE0MTU5MjY1MzU4OTc5KTsNCgkJCQkJCQkJYm9keS5NYXNzICs9IGJvZHkyLk1hc3M7DQoJCQkJCQkJfQ0KCQkJCQkJCWVsc2UNCgkJCQkJCQl7DQoJCQkJCQkJCWJvZHkuVmlzaWJsZSA9IDA7DQoJCQkJCQkJfQ0KCQkJCQkJfQ0KCQkJCQl9DQoJCQkJfQ0KCQkJfQ0KCQl9DQoJfQ0KCWJhcnJpZXIoQ0xLX0xPQ0FMX01FTV9GRU5DRSk7DQoJYm9keS5TcGVlZFggKz0gZHQgKiBib2R5LkZvcmNlWCAvIGJvZHkuTWFzczsNCglib2R5LlNwZWVkWSArPSBkdCAqIGJvZHkuRm9yY2VZIC8gYm9keS5NYXNzOw0KCWJvZHkuTG9jWCArPSBkdCAqIChib2R5LlNwZWVkWCAqIDAuOTlmKTsNCglib2R5LkxvY1kgKz0gZHQgKiAoYm9keS5TcGVlZFkgKiAwLjk5Zik7DQoJYm9vbCBmbGFnMTUgPSBib2R5LkxpZmV0aW1lID4gMC4wZjsNCglpZiAoZmxhZzE1KQ0KCXsNCgkJYm9keS5BZ2UgKz0gZHQgKiA0LjBmOw0KCX0NCglvdXRCb2RpZXNbKG51bSldID0gYm9keTsNCn0NCi8vIE5Cb2RpZXMuUGh5c2ljcy5DVURBRmxvYXQNCiAgc3RydWN0IEJvZHkgQ29sbGlkZUJvZGllcyhzdHJ1Y3QgQm9keSBtYXN0ZXIsIHN0cnVjdCBCb2R5IHNsYXZlLCBmbG9hdCBkViwgZmxvYXQgdmVjWCwgZmxvYXQgdmVjWSkNCnsNCglzdHJ1Y3QgQm9keSBib2R5ID0gbWFzdGVyOw0KCWJvZHkuU3BlZWRYICs9IGRWICogdmVjWDsNCglib2R5LlNwZWVkWSArPSBkViAqIHZlY1k7DQoJYm9vbCBmbGFnID0gYm9keS5CbGFja0hvbGUgIT0gMTsNCglpZiAoZmxhZykNCgl7DQoJCWZsb2F0IG51bSA9IDMuMTQxNTkzZiAqIChmbG9hdClwb3coKGRvdWJsZSkoYm9keS5TaXplICogMC41ZiksIDIuMCk7DQoJCWZsb2F0IG51bTIgPSAzLjE0MTU5M2YgKiAoZmxvYXQpcG93KChkb3VibGUpKHNsYXZlLlNpemUgKiAwLjVmKSwgMi4wKTsNCgkJZmxvYXQgbnVtMyA9IG51bSArIG51bTI7DQoJCWJvZHkuU2l6ZSA9IChmbG9hdClzcXJ0KChkb3VibGUpbnVtMyAvIDMuMTQxNTkyNjUzNTg5NzkpICogMi4wZjsNCgl9DQoJYm9keS5NYXNzICs9IHNsYXZlLk1hc3M7DQoJcmV0dXJuIGJvZHk7DQp9DQo=</SourceCodeFile>
  </SourceCodes>
  <Functions>
    <CudafyKernelMethod Name="CalcForce" Type="Global" IsDummy="false" DummyBehaviour="Default">
      <Type>NBodies.Physics.CUDAFloat</Type>
      <Assembly>NBodies, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</Assembly>
      <AssemblyName>NBodies</AssemblyName>
      <AssemblyPath>C:\GitHub\NBodies\NBodies\bin\Debug\NBodies.exe</AssemblyPath>
      <Checksum>1995635234</Checksum>
      <Parameters>
        <ReturnType>System.Void</ReturnType>
        <Parameter Type="Cudafy.GThread" Name="gpThread" Position="0" />
        <Parameter Type="NBodies.Physics.Body[]" Name="inBodies" Position="1" />
        <Parameter Type="NBodies.Physics.Body[]" Name="outBodies" Position="2" />
        <Parameter Type="System.Single" Name="dt" Position="3" />
      </Parameters>
    </CudafyKernelMethod>
    <CudafyKernelMethod Name="CalcCollisions" Type="Global" IsDummy="false" DummyBehaviour="Default">
      <Type>NBodies.Physics.CUDAFloat</Type>
      <Assembly>NBodies, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</Assembly>
      <AssemblyName>NBodies</AssemblyName>
      <AssemblyPath>C:\GitHub\NBodies\NBodies\bin\Debug\NBodies.exe</AssemblyPath>
      <Checksum>1995635234</Checksum>
      <Parameters>
        <ReturnType>System.Void</ReturnType>
        <Parameter Type="Cudafy.GThread" Name="gpThread" Position="0" />
        <Parameter Type="NBodies.Physics.Body[]" Name="inBodies" Position="1" />
        <Parameter Type="NBodies.Physics.Body[]" Name="outBodies" Position="2" />
        <Parameter Type="System.Single" Name="dt" Position="3" />
        <Parameter Type="System.Single" Name="viscosity" Position="4" />
      </Parameters>
    </CudafyKernelMethod>
    <CudafyKernelMethod Name="CollideBodies" Type="Device" IsDummy="false" DummyBehaviour="Default">
      <Type>NBodies.Physics.CUDAFloat</Type>
      <Assembly>NBodies, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</Assembly>
      <AssemblyName>NBodies</AssemblyName>
      <AssemblyPath>C:\GitHub\NBodies\NBodies\bin\Debug\NBodies.exe</AssemblyPath>
      <Checksum>1995635234</Checksum>
      <Parameters>
        <ReturnType>NBodies.Physics.Body</ReturnType>
        <Parameter Type="NBodies.Physics.Body" Name="master" Position="0" />
        <Parameter Type="NBodies.Physics.Body" Name="slave" Position="1" />
        <Parameter Type="System.Single" Name="dV" Position="2" />
        <Parameter Type="System.Single" Name="vecX" Position="3" />
        <Parameter Type="System.Single" Name="vecY" Position="4" />
      </Parameters>
    </CudafyKernelMethod>
  </Functions>
  <Constants />
  <Types>
    <CudafyType Name="Body" IsDummy="false" DummyBehaviour="Default">
      <Type>NBodies.Physics.Body</Type>
      <Assembly>NBodies, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</Assembly>
      <AssemblyName>NBodies</AssemblyName>
      <AssemblyPath>C:\GitHub\NBodies\NBodies\bin\Debug\NBodies.exe</AssemblyPath>
      <Checksum>1995635234</Checksum>
    </CudafyType>
  </Types>
</CudafyModule>