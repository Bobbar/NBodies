<?xml version="1.0" encoding="utf-8"?>
<CudafyModule Version="1.29.5576.13786" Name="CUDAFloat" DebugInfo="false" HasCudaSourceCode="false" HasPTX="false" HasBinary="false">
  <CudaSourceCode></CudaSourceCode>
  <PTXMODULES />
  <BinaryModules />
  <SourceCodes>
    <SourceCodeFile ID="eabf5b51-1341-4a89-9f5f-196a5433c394" Language="Cuda" Arch="Unknown"></SourceCodeFile>
  </SourceCodes>
  <Functions>
    <CudafyKernelMethod Name="CalcPressureAndDensity" Type="Global" IsDummy="false" DummyBehaviour="Default">
      <Type>NBodies.Physics.CUDAFloat</Type>
      <Assembly>NBodies, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</Assembly>
      <AssemblyName>NBodies</AssemblyName>
      <AssemblyPath>C:\GitHub\NBodies\NBodies\bin\Release\NBodies.exe</AssemblyPath>
      <Checksum>736862610</Checksum>
      <Parameters>
        <ReturnType>System.Void</ReturnType>
        <Parameter Type="Cudafy.GThread" Name="gpThread" Position="0" />
        <Parameter Type="NBodies.Physics.Body[]" Name="inBodies" Position="1" />
        <Parameter Type="NBodies.Physics.Body[]" Name="outBodies" Position="2" />
      </Parameters>
    </CudafyKernelMethod>
    <CudafyKernelMethod Name="CalcForce" Type="Global" IsDummy="false" DummyBehaviour="Default">
      <Type>NBodies.Physics.CUDAFloat</Type>
      <Assembly>NBodies, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</Assembly>
      <AssemblyName>NBodies</AssemblyName>
      <AssemblyPath>C:\GitHub\NBodies\NBodies\bin\Release\NBodies.exe</AssemblyPath>
      <Checksum>736862610</Checksum>
      <Parameters>
        <ReturnType>System.Void</ReturnType>
        <Parameter Type="Cudafy.GThread" Name="gpThread" Position="0" />
        <Parameter Type="NBodies.Physics.Body[]" Name="inBodies" Position="1" />
        <Parameter Type="NBodies.Physics.Body[]" Name="outBodies" Position="2" />
        <Parameter Type="System.Single" Name="dt" Position="3" />
      </Parameters>
    </CudafyKernelMethod>
    <CudafyKernelMethod Name="CalcCollisions" Type="Global" IsDummy="false" DummyBehaviour="Default">
      <Type>NBodies.Physics.CUDAFloat</Type>
      <Assembly>NBodies, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</Assembly>
      <AssemblyName>NBodies</AssemblyName>
      <AssemblyPath>C:\GitHub\NBodies\NBodies\bin\Release\NBodies.exe</AssemblyPath>
      <Checksum>736862610</Checksum>
      <Parameters>
        <ReturnType>System.Void</ReturnType>
        <Parameter Type="Cudafy.GThread" Name="gpThread" Position="0" />
        <Parameter Type="NBodies.Physics.Body[]" Name="inBodies" Position="1" />
        <Parameter Type="NBodies.Physics.Body[]" Name="outBodies" Position="2" />
        <Parameter Type="System.Single" Name="dt" Position="3" />
        <Parameter Type="System.Single" Name="viscosity" Position="4" />
      </Parameters>
    </CudafyKernelMethod>
    <CudafyKernelMethod Name="CollideBodies" Type="Device" IsDummy="false" DummyBehaviour="Default">
      <Type>NBodies.Physics.CUDAFloat</Type>
      <Assembly>NBodies, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</Assembly>
      <AssemblyName>NBodies</AssemblyName>
      <AssemblyPath>C:\GitHub\NBodies\NBodies\bin\Release\NBodies.exe</AssemblyPath>
      <Checksum>736862610</Checksum>
      <Parameters>
        <ReturnType>NBodies.Physics.Body</ReturnType>
        <Parameter Type="NBodies.Physics.Body" Name="master" Position="0" />
        <Parameter Type="NBodies.Physics.Body" Name="slave" Position="1" />
        <Parameter Type="System.Single" Name="dV" Position="2" />
        <Parameter Type="System.Single" Name="vecX" Position="3" />
        <Parameter Type="System.Single" Name="vecY" Position="4" />
      </Parameters>
    </CudafyKernelMethod>
  </Functions>
  <Constants />
  <Types>
    <CudafyType Name="Body" IsDummy="false" DummyBehaviour="Default">
      <Type>NBodies.Physics.Body</Type>
      <Assembly>NBodies, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</Assembly>
      <AssemblyName>NBodies</AssemblyName>
      <AssemblyPath>C:\GitHub\NBodies\NBodies\bin\Release\NBodies.exe</AssemblyPath>
      <Checksum>736862610</Checksum>
    </CudafyType>
  </Types>
</CudafyModule>