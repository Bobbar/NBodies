<?xml version="1.0" encoding="utf-8"?>
<CudafyModule Version="1.29.5576.13786" Name="CUDAFloat" DebugInfo="false" HasCudaSourceCode="false" HasPTX="false" HasBinary="false">
  <CudaSourceCode></CudaSourceCode>
  <PTXMODULES />
  <BinaryModules />
  <SourceCodes>
    <SourceCodeFile ID="d64d7680-7f46-4de8-9228-ae4c06338f4d" Language="Cuda" Arch="Unknown">I2lmIGRlZmluZWQoY2xfa2hyX2ZwNjQpDQojcHJhZ21hIE9QRU5DTCBFWFRFTlNJT04gY2xfa2hyX2ZwNjQ6IGVuYWJsZQ0KI2VsaWYgZGVmaW5lZChjbF9hbWRfZnA2NCkNCiNwcmFnbWEgT1BFTkNMIEVYVEVOU0lPTiBjbF9hbWRfZnA2NDogZW5hYmxlDQojZW5kaWYNCnN0cnVjdCBCb2R5DQp7DQoJZmxvYXQgTG9jWDsNCglmbG9hdCBMb2NZOw0KCWZsb2F0IE1hc3M7DQoJZmxvYXQgU3BlZWRYOw0KCWZsb2F0IFNwZWVkWTsNCglmbG9hdCBGb3JjZVg7DQoJZmxvYXQgRm9yY2VZOw0KCWZsb2F0IEZvcmNlVG90Ow0KCWludCBDb2xvcjsNCglmbG9hdCBTaXplOw0KCWludCBWaXNpYmxlOw0KCWludCBJblJvY2hlOw0KCWludCBCbGFja0hvbGU7DQoJaW50IFVJRDsNCglmbG9hdCBEZW5zaXR5Ow0KCWZsb2F0IFByZXNzdXJlOw0KfTsNCg0KDQovLyBOQm9kaWVzLlBoeXNpY3MuQ1VEQUZsb2F0DQpfX2tlcm5lbCAgdm9pZCBDYWxjUHJlc3N1cmVBbmREZW5zaXR5KGdsb2JhbCBzdHJ1Y3QgQm9keSogaW5Cb2RpZXMsIGludCBpbkJvZGllc0xlbjAsIGdsb2JhbCBzdHJ1Y3QgQm9keSogb3V0Qm9kaWVzLCBpbnQgb3V0Qm9kaWVzTGVuMCk7DQovLyBOQm9kaWVzLlBoeXNpY3MuQ1VEQUZsb2F0DQpfX2tlcm5lbCAgdm9pZCBDYWxjRm9yY2UoZ2xvYmFsIHN0cnVjdCBCb2R5KiBpbkJvZGllcywgaW50IGluQm9kaWVzTGVuMCwgZ2xvYmFsIHN0cnVjdCBCb2R5KiBvdXRCb2RpZXMsIGludCBvdXRCb2RpZXNMZW4wLCBmbG9hdCBkdCk7DQovLyBOQm9kaWVzLlBoeXNpY3MuQ1VEQUZsb2F0DQpfX2tlcm5lbCAgdm9pZCBDYWxjQ29sbGlzaW9ucyhnbG9iYWwgc3RydWN0IEJvZHkqIGluQm9kaWVzLCBpbnQgaW5Cb2RpZXNMZW4wLCBnbG9iYWwgc3RydWN0IEJvZHkqIG91dEJvZGllcywgaW50IG91dEJvZGllc0xlbjAsIGZsb2F0IGR0KTsNCi8vIE5Cb2RpZXMuUGh5c2ljcy5DVURBRmxvYXQNCiBzdHJ1Y3QgQm9keSBDb2xsaWRlQm9kaWVzKHN0cnVjdCBCb2R5IG1hc3Rlciwgc3RydWN0IEJvZHkgc2xhdmUsIGZsb2F0IGRWLCBmbG9hdCB2ZWNYLCBmbG9hdCB2ZWNZKTsNCg0KLy8gTkJvZGllcy5QaHlzaWNzLkNVREFGbG9hdA0KX19rZXJuZWwgIHZvaWQgQ2FsY1ByZXNzdXJlQW5kRGVuc2l0eShnbG9iYWwgc3RydWN0IEJvZHkqIGluQm9kaWVzLCBpbnQgaW5Cb2RpZXNMZW4wLCBnbG9iYWwgc3RydWN0IEJvZHkqIG91dEJvZGllcywgaW50IG91dEJvZGllc0xlbjApDQp7DQoJZmxvYXQgbnVtID0gMC4xZjsNCglmbG9hdCBudW0yID0gMS4xOTIwOTNFLTA3ZjsNCglpbnQgbnVtMyA9IGdldF9sb2NhbF9zaXplKDApICogZ2V0X2dyb3VwX2lkKDApICsgZ2V0X2xvY2FsX2lkKDApOw0KCXN0cnVjdCBCb2R5IGJvZHkgPSBpbkJvZGllc1sobnVtMyldOw0KCWJvZHkuRGVuc2l0eSA9IDAuMGY7DQoJYm9keS5QcmVzc3VyZSA9IDAuMGY7DQoJZmxvYXQgc2l6ZSA9IGJvZHkuU2l6ZTsNCglmbG9hdCBudW00ID0gc2l6ZSAqIHNpemU7DQoJZG91YmxlIG51bTUgPSBwb3coKGRvdWJsZSlzaXplLCA5LjApOw0KCWRvdWJsZSBudW02ID0gKGRvdWJsZSkoKGZsb2F0KSgzMTUuMCAvICgyMDEuMDYxOTI5ODI5NzQ3ICogbnVtNSkpKTsNCglpZiAoYm9keS5JblJvY2hlID09IDEpDQoJew0KCQlmb3IgKGludCBpID0gMDsgaSA8IGluQm9kaWVzTGVuMDsgaSsrKQ0KCQl7DQoJCQlzdHJ1Y3QgQm9keSBib2R5MiA9IGluQm9kaWVzWyhpKV07DQoJCQlpZiAoYm9keTIuSW5Sb2NoZSA9PSAxKQ0KCQkJew0KCQkJCWZsb2F0IGFyZ19DRl8wID0gYm9keTIuTG9jWCAtIGJvZHkuTG9jWDsNCgkJCQlmbG9hdCBudW03ID0gYm9keTIuTG9jWSAtIGJvZHkuTG9jWTsNCgkJCQlmbG9hdCBudW04ID0gYXJnX0NGXzAgKiBhcmdfQ0ZfMCArIG51bTcgKiBudW03Ow0KCQkJCWlmIChudW04IDw9IHNpemUpDQoJCQkJew0KCQkJCQlpZiAobnVtOCA8IG51bTIpDQoJCQkJCXsNCgkJCQkJCW51bTggPSBudW0yOw0KCQkJCQl9DQoJCQkJCWZsb2F0IG51bTkgPSBudW00IC0gbnVtODsNCgkJCQkJZG91YmxlIG51bTEwID0gbnVtNiAqIChkb3VibGUpbnVtOSAqIChkb3VibGUpbnVtOSAqIChkb3VibGUpbnVtOTsNCgkJCQkJYm9keS5EZW5zaXR5ICs9IChmbG9hdCkoKGRvdWJsZSlib2R5Lk1hc3MgKiBudW0xMCk7DQoJCQkJfQ0KCQkJfQ0KCQl9DQoJCWlmIChib2R5LkRlbnNpdHkgPiAwLjBmKQ0KCQl7DQoJCQlib2R5LlByZXNzdXJlID0gbnVtICogYm9keS5EZW5zaXR5Ow0KCQl9DQoJfQ0KCW91dEJvZGllc1sobnVtMyldID0gYm9keTsNCn0NCi8vIE5Cb2RpZXMuUGh5c2ljcy5DVURBRmxvYXQNCl9fa2VybmVsICB2b2lkIENhbGNGb3JjZShnbG9iYWwgc3RydWN0IEJvZHkqIGluQm9kaWVzLCBpbnQgaW5Cb2RpZXNMZW4wLCBnbG9iYWwgc3RydWN0IEJvZHkqIG91dEJvZGllcywgaW50IG91dEJvZGllc0xlbjAsIGZsb2F0IGR0KQ0Kew0KCWZsb2F0IG51bSA9IDIuMGY7DQoJaW50IG51bTIgPSBnZXRfZ2xvYmFsX2lkKDApOw0KCWludCBudW0zID0gZ2V0X2xvY2FsX2lkKDApOw0KCWludCBhcmdfMkJfMCA9IGdldF9nbG9iYWxfc2l6ZSgwKTsNCglpbnQgbnVtNCA9IGdldF9sb2NhbF9zaXplKDApOw0KCWludCBudW01ID0gYXJnXzJCXzAgLyBudW00Ow0KCXN0cnVjdCBCb2R5IGJvZHkgPSBpbkJvZGllc1sobnVtMildOw0KCWJvZHkuRm9yY2VUb3QgPSAwLjBmOw0KCWJvZHkuRm9yY2VYID0gMC4wZjsNCglib2R5LkZvcmNlWSA9IDAuMGY7DQoJX19sb2NhbCBzdHJ1Y3QgQm9keSBhcnJheVsyNTZdOw0KDQoJaW50IGFycmF5TGVuMCA9IDI1NjsNCglmb3IgKGludCBpID0gMDsgaSA8IG51bTU7IGkrKykNCgl7DQoJCWFycmF5WyhudW0zKV0gPSBpbkJvZGllc1soaSAqIG51bTQgKyBudW0zKV07DQoJCWJhcnJpZXIoQ0xLX0xPQ0FMX01FTV9GRU5DRSk7DQoJCWZvciAoaW50IGogPSAwOyBqIDwgbnVtNDsgaisrKQ0KCQl7DQoJCQlzdHJ1Y3QgQm9keSBib2R5MiA9IGFycmF5WyhqKV07DQoJCQlpZiAoYm9keTIuVUlEICE9IGJvZHkuVUlEKQ0KCQkJew0KCQkJCWZsb2F0IG51bTYgPSBib2R5Mi5Mb2NYIC0gYm9keS5Mb2NYOw0KCQkJCWZsb2F0IG51bTcgPSBib2R5Mi5Mb2NZIC0gYm9keS5Mb2NZOw0KCQkJCWZsb2F0IG51bTggPSAoZmxvYXQpc3FydCgoZG91YmxlKShudW02ICogbnVtNiArIG51bTcgKiBudW03KSk7DQoJCQkJaWYgKG51bTggPiAwLjBmKQ0KCQkJCXsNCgkJCQkJZmxvYXQgbnVtOSA9IGJvZHkyLk1hc3MgKiBib2R5Lk1hc3MgLyAobnVtOCAqIG51bTggKyBudW0gKiBudW0pOw0KCQkJCQlib2R5LkZvcmNlVG90ICs9IG51bTk7DQoJCQkJCWJvZHkuRm9yY2VYICs9IG51bTkgKiBudW02IC8gbnVtODsNCgkJCQkJYm9keS5Gb3JjZVkgKz0gbnVtOSAqIG51bTcgLyBudW04Ow0KCQkJCX0NCgkJCX0NCgkJfQ0KCQliYXJyaWVyKENMS19MT0NBTF9NRU1fRkVOQ0UpOw0KCX0NCglpZiAoYm9keS5Gb3JjZVRvdCA+IGJvZHkuTWFzcyAqIDQuMGYgJiBib2R5LkJsYWNrSG9sZSA9PSAwKQ0KCXsNCgkJYm9keS5JblJvY2hlID0gMTsNCgl9DQoJZWxzZQ0KCXsNCgkJaWYgKGJvZHkuRm9yY2VUb3QgKiAyLjBmIDwgYm9keS5NYXNzICogNC4wZikNCgkJew0KCQkJYm9keS5JblJvY2hlID0gMDsNCgkJfQ0KCQllbHNlDQoJCXsNCgkJCWlmIChib2R5LkJsYWNrSG9sZSA9PSAyKQ0KCQkJew0KCQkJCWJvZHkuSW5Sb2NoZSA9IDE7DQoJCQl9DQoJCX0NCgl9DQoJb3V0Qm9kaWVzWyhudW0yKV0gPSBib2R5Ow0KfQ0KLy8gTkJvZGllcy5QaHlzaWNzLkNVREFGbG9hdA0KX19rZXJuZWwgIHZvaWQgQ2FsY0NvbGxpc2lvbnMoZ2xvYmFsIHN0cnVjdCBCb2R5KiBpbkJvZGllcywgaW50IGluQm9kaWVzTGVuMCwgZ2xvYmFsIHN0cnVjdCBCb2R5KiBvdXRCb2RpZXMsIGludCBvdXRCb2RpZXNMZW4wLCBmbG9hdCBkdCkNCnsNCglpbnQgbnVtID0gZ2V0X2dsb2JhbF9pZCgwKTsNCglpbnQgbnVtMiA9IGdldF9sb2NhbF9pZCgwKTsNCglpbnQgYXJnXzI0XzAgPSBnZXRfZ2xvYmFsX3NpemUoMCk7DQoJaW50IG51bTMgPSBnZXRfbG9jYWxfc2l6ZSgwKTsNCglpbnQgbnVtNCA9IGFyZ18yNF8wIC8gbnVtMzsNCglzdHJ1Y3QgQm9keSBib2R5ID0gaW5Cb2RpZXNbKG51bSldOw0KCV9fbG9jYWwgc3RydWN0IEJvZHkgYXJyYXlbMjU2XTsNCg0KCWludCBhcnJheUxlbjAgPSAyNTY7DQoJZmxvYXQgc2l6ZSA9IGJvZHkuU2l6ZTsNCglkb3VibGUgbnVtNSA9IHBvdygoZG91YmxlKShzaXplIC8gMy4wZiksIDYuMCk7DQoJZmxvYXQgbnVtNiA9IChmbG9hdCkoMTUuMCAvICgzLjE0MTU5MjY1MzU4OTc5ICogbnVtNSkpOw0KCWZsb2F0IG51bTcgPSAxLjVmOw0KCWZsb2F0IG51bTggPSAoZmxvYXQpcG93KChkb3VibGUpYm9keS5TaXplLCAzLjApOw0KCWZsb2F0IG51bTkgPSAoZmxvYXQpKDE1LjAgLyAoNi4yODMxODUzMDcxNzk1OSAqIChkb3VibGUpbnVtOCkpOw0KCWZvciAoaW50IGkgPSAwOyBpIDwgbnVtNDsgaSsrKQ0KCXsNCgkJYXJyYXlbKG51bTIpXSA9IGluQm9kaWVzWyhpICogbnVtMyArIG51bTIpXTsNCgkJYmFycmllcihDTEtfTE9DQUxfTUVNX0ZFTkNFKTsNCgkJaWYgKGJvZHkuVmlzaWJsZSA9PSAxKQ0KCQl7DQoJCQlmb3IgKGludCBqID0gMDsgaiA8IG51bTM7IGorKykNCgkJCXsNCgkJCQlzdHJ1Y3QgQm9keSBib2R5MiA9IGFycmF5WyhqKV07DQoJCQkJaWYgKGJvZHkyLlVJRCAhPSBib2R5LlVJRCAmJiBib2R5Mi5WaXNpYmxlID09IDEpDQoJCQkJew0KCQkJCQlmbG9hdCBudW0xMCA9IGJvZHkyLkxvY1ggLSBib2R5LkxvY1g7DQoJCQkJCWZsb2F0IG51bTExID0gYm9keTIuTG9jWSAtIGJvZHkuTG9jWTsNCgkJCQkJZmxvYXQgbnVtMTIgPSBudW0xMCAqIG51bTEwICsgbnVtMTEgKiBudW0xMTsNCgkJCQkJZmxvYXQgbnVtMTMgPSAoZmxvYXQpc3FydCgoZG91YmxlKW51bTEyKTsNCgkJCQkJaWYgKG51bTEzIDw9IGJvZHkuU2l6ZSAqIDAuNWYgKyBib2R5Mi5TaXplICogMC41ZikNCgkJCQkJew0KCQkJCQkJaWYgKG51bTEzID4gMC4wZikNCgkJCQkJCXsNCgkJCQkJCQlmbG9hdCBzcGVlZFggPSBib2R5LlNwZWVkWDsNCgkJCQkJCQlmbG9hdCBzcGVlZFkgPSBib2R5LlNwZWVkWTsNCgkJCQkJCQlmbG9hdCBzcGVlZFgyID0gYm9keTIuU3BlZWRYOw0KCQkJCQkJCWZsb2F0IHNwZWVkWTIgPSBib2R5Mi5TcGVlZFk7DQoJCQkJCQkJZmxvYXQgbWFzcyA9IGJvZHkuTWFzczsNCgkJCQkJCQlmbG9hdCBtYXNzMiA9IGJvZHkyLk1hc3M7DQoJCQkJCQkJZmxvYXQgbnVtMTQgPSBudW0xMCAqIDAuNWY7DQoJCQkJCQkJZmxvYXQgbnVtMTUgPSBudW0xMSAqIDAuNWY7DQoJCQkJCQkJbnVtMTQgLz0gbnVtMTMgKiAwLjVmOw0KCQkJCQkJCW51bTE1IC89IG51bTEzICogMC41ZjsNCgkJCQkJCQlmbG9hdCBudW0xNiA9IG51bTE0ICogc3BlZWRYICsgbnVtMTUgKiBzcGVlZFk7DQoJCQkJCQkJZmxvYXQgbnVtMTcgPSBudW0xNCAqIHNwZWVkWDIgKyBudW0xNSAqIHNwZWVkWTI7DQoJCQkJCQkJZmxvYXQgZFYgPSAobWFzcyAqIG51bTE2ICsgbWFzczIgKiBudW0xNyAtIG1hc3MyICogKG51bTE2IC0gbnVtMTcpKSAvIChtYXNzICsgbWFzczIpIC0gbnVtMTY7DQoJCQkJCQkJaWYgKGJvZHkuSW5Sb2NoZSA9PSAwICYgYm9keTIuSW5Sb2NoZSA9PSAxKQ0KCQkJCQkJCXsNCgkJCQkJCQkJaWYgKGJvZHkuTWFzcyA+IGJvZHkyLk1hc3MpDQoJCQkJCQkJCXsNCgkJCQkJCQkJCWJvZHkgPSBDb2xsaWRlQm9kaWVzKGJvZHksIGJvZHkyLCBkViwgbnVtMTQsIG51bTE1KTsNCgkJCQkJCQkJfQ0KCQkJCQkJCQllbHNlDQoJCQkJCQkJCXsNCgkJCQkJCQkJCWlmIChib2R5Lk1hc3MgPT0gYm9keTIuTWFzcykNCgkJCQkJCQkJCXsNCgkJCQkJCQkJCQlpZiAoYm9keS5VSUQgPiBib2R5Mi5VSUQpDQoJCQkJCQkJCQkJew0KCQkJCQkJCQkJCQlib2R5ID0gQ29sbGlkZUJvZGllcyhib2R5LCBib2R5MiwgZFYsIG51bTE0LCBudW0xNSk7DQoJCQkJCQkJCQkJfQ0KCQkJCQkJCQkJCWVsc2UNCgkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCWJvZHkuVmlzaWJsZSA9IDA7DQoJCQkJCQkJCQkJfQ0KCQkJCQkJCQkJfQ0KCQkJCQkJCQkJZWxzZQ0KCQkJCQkJCQkJew0KCQkJCQkJCQkJCWJvZHkuVmlzaWJsZSA9IDA7DQoJCQkJCQkJCQl9DQoJCQkJCQkJCX0NCgkJCQkJCQl9DQoJCQkJCQkJZWxzZQ0KCQkJCQkJCXsNCgkJCQkJCQkJaWYgKGJvZHkuSW5Sb2NoZSA9PSAwICYgYm9keTIuSW5Sb2NoZSA9PSAwKQ0KCQkJCQkJCQl7DQoJCQkJCQkJCQlpZiAoYm9keS5NYXNzID4gYm9keTIuTWFzcykNCgkJCQkJCQkJCXsNCgkJCQkJCQkJCQlib2R5ID0gQ29sbGlkZUJvZGllcyhib2R5LCBib2R5MiwgZFYsIG51bTE0LCBudW0xNSk7DQoJCQkJCQkJCQl9DQoJCQkJCQkJCQllbHNlDQoJCQkJCQkJCQl7DQoJCQkJCQkJCQkJaWYgKGJvZHkuTWFzcyA9PSBib2R5Mi5NYXNzKQ0KCQkJCQkJCQkJCXsNCgkJCQkJCQkJCQkJaWYgKGJvZHkuVUlEID4gYm9keTIuVUlEKQ0KCQkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCQlib2R5ID0gQ29sbGlkZUJvZGllcyhib2R5LCBib2R5MiwgZFYsIG51bTE0LCBudW0xNSk7DQoJCQkJCQkJCQkJCX0NCgkJCQkJCQkJCQkJZWxzZQ0KCQkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCQlib2R5LlZpc2libGUgPSAwOw0KCQkJCQkJCQkJCQl9DQoJCQkJCQkJCQkJfQ0KCQkJCQkJCQkJCWVsc2UNCgkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCWJvZHkuVmlzaWJsZSA9IDA7DQoJCQkJCQkJCQkJfQ0KCQkJCQkJCQkJfQ0KCQkJCQkJCQl9DQoJCQkJCQkJCWVsc2UNCgkJCQkJCQkJew0KCQkJCQkJCQkJaWYgKGJvZHkuSW5Sb2NoZSA9PSAxICYgYm9keTIuSW5Sb2NoZSA9PSAxKQ0KCQkJCQkJCQkJew0KCQkJCQkJCQkJCWlmIChib2R5LkRlbnNpdHkgPiAwLjBmICYmIGJvZHkyLkRlbnNpdHkgPiAwLjBmKQ0KCQkJCQkJCQkJCXsNCgkJCQkJCQkJCQkJaWYgKG51bTEyIDwgMC4wMDJmKQ0KCQkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCQludW0xMiA9IDAuMDAyZjsNCgkJCQkJCQkJCQkJfQ0KCQkJCQkJCQkJCQlmbG9hdCBudW0xOCA9IGJvZHkyLk1hc3MgKiAoYm9keS5QcmVzc3VyZSArIGJvZHkyLlByZXNzdXJlKSAvICgyLjBmICogYm9keTIuRGVuc2l0eSk7DQoJCQkJCQkJCQkJCWZsb2F0IG51bTE5ID0gLW51bTYgKiAzLjBmICogKHNpemUgLSBudW0xMykgKiAoc2l6ZSAtIG51bTEzKSAvIG51bTEzOw0KCQkJCQkJCQkJCQlmbG9hdCBudW0yMCA9IG51bTEwICogbnVtMTk7DQoJCQkJCQkJCQkJCWZsb2F0IG51bTIxID0gbnVtMTEgKiBudW0xOTsNCgkJCQkJCQkJCQkJbnVtMjAgKj0gbnVtMTg7DQoJCQkJCQkJCQkJCW51bTIxICo9IG51bTE4Ow0KCQkJCQkJCQkJCQlib2R5LkZvcmNlWCArPSBudW0yMDsNCgkJCQkJCQkJCQkJYm9keS5Gb3JjZVkgKz0gbnVtMjE7DQoJCQkJCQkJCQkJCWZsb2F0IG51bTIyID0gbnVtOSAqICg2LjBmIC8gbnVtOCkgKiAoYm9keS5TaXplIC0gbnVtMTIpOw0KCQkJCQkJCQkJCQlmbG9hdCBudW0yMyA9IGJvZHkuTWFzcyAqIG51bTIyICogbnVtNyAqIDEuMGYgLyA0MC4wZjsNCgkJCQkJCQkJCQkJZmxvYXQgbnVtMjQgPSBib2R5Mi5TcGVlZFggLSBib2R5LlNwZWVkWDsNCgkJCQkJCQkJCQkJZmxvYXQgbnVtMjUgPSBib2R5Mi5TcGVlZFkgLSBib2R5LlNwZWVkWTsNCgkJCQkJCQkJCQkJbnVtMjQgKj0gbnVtMjM7DQoJCQkJCQkJCQkJCW51bTI1ICo9IG51bTIzOw0KCQkJCQkJCQkJCQlib2R5LkZvcmNlWCArPSBudW0yNDsNCgkJCQkJCQkJCQkJYm9keS5Gb3JjZVkgKz0gbnVtMjU7DQoJCQkJCQkJCQkJfQ0KCQkJCQkJCQkJfQ0KCQkJCQkJCQkJZWxzZQ0KCQkJCQkJCQkJew0KCQkJCQkJCQkJCWlmIChib2R5LkluUm9jaGUgPT0gMSAmIGJvZHkyLkluUm9jaGUgPT0gMCkNCgkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCWJvZHkuVmlzaWJsZSA9IDA7DQoJCQkJCQkJCQkJfQ0KCQkJCQkJCQkJfQ0KCQkJCQkJCQl9DQoJCQkJCQkJfQ0KCQkJCQkJfQ0KCQkJCQkJZWxzZQ0KCQkJCQkJew0KCQkJCQkJCWlmIChib2R5Lk1hc3MgPiBib2R5Mi5NYXNzKQ0KCQkJCQkJCXsNCgkJCQkJCQkJZmxvYXQgbnVtMjYgPSAzLjE0MTU5M2YgKiAoZmxvYXQpcG93KChkb3VibGUpYm9keS5TaXplLCAyLjApOw0KCQkJCQkJCQlmbG9hdCBudW0yNyA9IDMuMTQxNTkzZiAqIChmbG9hdClwb3coKGRvdWJsZSlib2R5Mi5TaXplLCAyLjApOw0KCQkJCQkJCQludW0yNiArPSBudW0yNzsNCgkJCQkJCQkJYm9keS5TaXplID0gKGZsb2F0KXNxcnQoKGRvdWJsZSludW0yNiAvIDMuMTQxNTkyNjUzNTg5NzkpOw0KCQkJCQkJCQlib2R5Lk1hc3MgKz0gYm9keTIuTWFzczsNCgkJCQkJCQl9DQoJCQkJCQkJZWxzZQ0KCQkJCQkJCXsNCgkJCQkJCQkJYm9keS5WaXNpYmxlID0gMDsNCgkJCQkJCQl9DQoJCQkJCQl9DQoJCQkJCX0NCgkJCQl9DQoJCQl9DQoJCX0NCgkJYmFycmllcihDTEtfTE9DQUxfTUVNX0ZFTkNFKTsNCgl9DQoJYm9keS5TcGVlZFggKz0gZHQgKiBib2R5LkZvcmNlWCAvIGJvZHkuTWFzczsNCglib2R5LlNwZWVkWSArPSBkdCAqIGJvZHkuRm9yY2VZIC8gYm9keS5NYXNzOw0KCWJvZHkuTG9jWCArPSBkdCAqIGJvZHkuU3BlZWRYOw0KCWJvZHkuTG9jWSArPSBkdCAqIGJvZHkuU3BlZWRZOw0KCW91dEJvZGllc1sobnVtKV0gPSBib2R5Ow0KfQ0KLy8gTkJvZGllcy5QaHlzaWNzLkNVREFGbG9hdA0KIHN0cnVjdCBCb2R5IENvbGxpZGVCb2RpZXMoc3RydWN0IEJvZHkgbWFzdGVyLCBzdHJ1Y3QgQm9keSBzbGF2ZSwgZmxvYXQgZFYsIGZsb2F0IHZlY1gsIGZsb2F0IHZlY1kpDQp7DQoJc3RydWN0IEJvZHkgYm9keSA9IG1hc3RlcjsNCglib2R5LlNwZWVkWCArPSBkViAqIHZlY1g7DQoJYm9keS5TcGVlZFkgKz0gZFYgKiB2ZWNZOw0KCWZsb2F0IGFyZ181Ql8wID0gMy4xNDE1OTNmICogKGZsb2F0KXBvdygoZG91YmxlKWJvZHkuU2l6ZSwgMi4wKTsNCglmbG9hdCBudW0gPSAzLjE0MTU5M2YgKiAoZmxvYXQpcG93KChkb3VibGUpc2xhdmUuU2l6ZSwgMi4wKTsNCglmbG9hdCBudW0yID0gYXJnXzVCXzAgKyBudW07DQoJYm9keS5TaXplID0gKGZsb2F0KXNxcnQoKGRvdWJsZSludW0yIC8gMy4xNDE1OTI2NTM1ODk3OSk7DQoJYm9keS5NYXNzICs9IHNsYXZlLk1hc3M7DQoJcmV0dXJuIGJvZHk7DQp9DQo=</SourceCodeFile>
  </SourceCodes>
  <Functions>
    <CudafyKernelMethod Name="CalcPressureAndDensity" Type="Global" IsDummy="false" DummyBehaviour="Default">
      <Type>NBodies.Physics.CUDAFloat</Type>
      <Assembly>NBodies, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</Assembly>
      <AssemblyName>NBodies</AssemblyName>
      <AssemblyPath>C:\GitHub\NBodies\NBodies\bin\Release\NBodies.exe</AssemblyPath>
      <Checksum>1775124368</Checksum>
      <Parameters>
        <ReturnType>System.Void</ReturnType>
        <Parameter Type="Cudafy.GThread" Name="gpThread" Position="0" />
        <Parameter Type="NBodies.Physics.Body[]" Name="inBodies" Position="1" />
        <Parameter Type="NBodies.Physics.Body[]" Name="outBodies" Position="2" />
      </Parameters>
    </CudafyKernelMethod>
    <CudafyKernelMethod Name="CalcForce" Type="Global" IsDummy="false" DummyBehaviour="Default">
      <Type>NBodies.Physics.CUDAFloat</Type>
      <Assembly>NBodies, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</Assembly>
      <AssemblyName>NBodies</AssemblyName>
      <AssemblyPath>C:\GitHub\NBodies\NBodies\bin\Release\NBodies.exe</AssemblyPath>
      <Checksum>1775124368</Checksum>
      <Parameters>
        <ReturnType>System.Void</ReturnType>
        <Parameter Type="Cudafy.GThread" Name="gpThread" Position="0" />
        <Parameter Type="NBodies.Physics.Body[]" Name="inBodies" Position="1" />
        <Parameter Type="NBodies.Physics.Body[]" Name="outBodies" Position="2" />
        <Parameter Type="System.Single" Name="dt" Position="3" />
      </Parameters>
    </CudafyKernelMethod>
    <CudafyKernelMethod Name="CalcCollisions" Type="Global" IsDummy="false" DummyBehaviour="Default">
      <Type>NBodies.Physics.CUDAFloat</Type>
      <Assembly>NBodies, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</Assembly>
      <AssemblyName>NBodies</AssemblyName>
      <AssemblyPath>C:\GitHub\NBodies\NBodies\bin\Release\NBodies.exe</AssemblyPath>
      <Checksum>1775124368</Checksum>
      <Parameters>
        <ReturnType>System.Void</ReturnType>
        <Parameter Type="Cudafy.GThread" Name="gpThread" Position="0" />
        <Parameter Type="NBodies.Physics.Body[]" Name="inBodies" Position="1" />
        <Parameter Type="NBodies.Physics.Body[]" Name="outBodies" Position="2" />
        <Parameter Type="System.Single" Name="dt" Position="3" />
      </Parameters>
    </CudafyKernelMethod>
    <CudafyKernelMethod Name="CollideBodies" Type="Device" IsDummy="false" DummyBehaviour="Default">
      <Type>NBodies.Physics.CUDAFloat</Type>
      <Assembly>NBodies, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</Assembly>
      <AssemblyName>NBodies</AssemblyName>
      <AssemblyPath>C:\GitHub\NBodies\NBodies\bin\Release\NBodies.exe</AssemblyPath>
      <Checksum>1775124368</Checksum>
      <Parameters>
        <ReturnType>NBodies.Physics.Body</ReturnType>
        <Parameter Type="NBodies.Physics.Body" Name="master" Position="0" />
        <Parameter Type="NBodies.Physics.Body" Name="slave" Position="1" />
        <Parameter Type="System.Single" Name="dV" Position="2" />
        <Parameter Type="System.Single" Name="vecX" Position="3" />
        <Parameter Type="System.Single" Name="vecY" Position="4" />
      </Parameters>
    </CudafyKernelMethod>
  </Functions>
  <Constants />
  <Types>
    <CudafyType Name="Body" IsDummy="false" DummyBehaviour="Default">
      <Type>NBodies.Physics.Body</Type>
      <Assembly>NBodies, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</Assembly>
      <AssemblyName>NBodies</AssemblyName>
      <AssemblyPath>C:\GitHub\NBodies\NBodies\bin\Release\NBodies.exe</AssemblyPath>
      <Checksum>1775124368</Checksum>
    </CudafyType>
  </Types>
</CudafyModule>